@use 'variables' as *;
@use 'breakpoints' as *;
@use "sass:math";

// base layout classes
.container {
  width: 100%;
  max-width: map-get($grid-breakpoints, "xxl");
  margin: 0 auto;
  box-sizing: border-box;
}
.container-fluid {
  width: 100%;
  max-width: 100%;
  min-width: 100%;
  margin: 0 auto;
  box-sizing: border-box;
}
.row {
  display: flex;
  flex-flow: row wrap;
}

// container classes
@each $key, $val in $container-max-widths {
  .container-#{$key}{
    width: 100%;
    max-width: map-get($container-max-widths, #{$key});
    margin: 0 auto;
    box-sizing: border-box;
  }
}

// grid gaps
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include sm {
  @for $i from 1 through $grid-columns {
    .col-sm-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include md {
  @for $i from 1 through $grid-columns {
    .col-md-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include lg {
  @for $i from 1 through $grid-columns {
    .col-lg-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include xl {
  @for $i from 1 through $grid-columns {
    .col-xl-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include xxl {
  @for $i from 1 through $grid-columns {
    .col-xxl-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}